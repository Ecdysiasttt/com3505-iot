# `COM3505 Lab Assessment 1`

My implementation of LA1 involves a combination of adapted lab code from Ex09 and Ex10, along with functions of my own to tie the two together, with some minor QoL improvements here and there.

The IoT device I constructed uses 8 LEDs to signify what I identified as the main stages of Provisioning and Updating. These are:

 - startAP - Starting the device's Access Point (AP).
 - startServer - Starting the device's web server.
 - wifiWait - Waiting to connect to a WiFi network.
 - connWifi - Connecting to a WiFi network.
 - wifiEnabled - Successful WiFi connection established.
 - otaCheck - Checking for available OTA updates.
 - updating - Installing OTA update.
 - updatedSucc - Installation complete and successful.


The testing I conducted to ensure the LEDs indicators are robust under different usage scenarios will be detailed further. First let's look at the hardware setup.

## Hardware

![Top-down view of breadboard](photos/circuitTopDown.jpg)
A top-down view of the constructed circuit.

![Angled view of breadboard](photos/circuitAngleView.jpg)
An angled view of the constructed circuit.

Here you can see the hardware fully assembled. It's similar to the 9LEDs exercise, except here we're missing an LED as we only have 8.

I followed a vague categorisation with the choice of LED colour. A yellow LED symbolises a process is underway, or that the device is 'waiting' in some respect. A green LED symbolises success (e.g. a network was successfully joined, OTA update completed). A red LED symbolises a critical process is underway - this is only used during the OTA update to warn against turning the device off.

In respective order to the list of LEDs indicators listed above, the pins used are:
- 5
- 6
- 9
- 10
- 11
- 12
- 18 (A0)
- 17 (A1)

## Firmware

There are two files in my implementation: [PrAndUpThing.ino](`PrAndUpThing/PrAndUpThing.ino`) and [WebServerPages.h](`PrAndUpThing/WebServerPages.h`). Below I will describe how the system operates:

**PrAndUpThing.ino:**

 - startAP(): After initial setup functions (i.e. initialising the serial port and setting the LED pinout mode), the AP will attempt to start. At this point, **startAPLed** will be lit, albeit briefly (a delay of 250ms was added to the activateLED() function to ensure LEDs for short processes were still visible). It will initialise an AP with the SSID as "ESP32-LA1-DC5475CBF7A0" and password "password", with the MAC address naturally being dependent on the device.
 - initWebServer(): After the AP is setup, the device will launch the web server. This contains 4 paths: "/", "/wifi", "/wifichz", "/status". Each of the functions to create and serve each page is stored in [WebServerPages.h](`PrAndUpThing/WebServerPages.h`) in order to prevent [PrAndUpThing.ino](`PrAndUpThing/PrAndUpThing.ino`) being too cluttered. At this point, **startServerLed** will be lit, again briefly.
 - attemptWifiConnect(): The device will now make 10 attempts to connect to the most recently connected AP. At this point, **connWifiLed** will be lit. If a connection is established, the device will begin an OTA update - we will return to this branch later. If the connection fails, **wifiWaitLed** will be lit.
 
Setup is now complete. Now the device will wait for the user to connect to its AP in order to select a WiFi network, serving pending web requests every loop.

**Web Server:**
When a user connects to the access point and navigates to http://192.168.4.1, they are greeted with the following landing page:

![Screenshot of landing page](photos/rootPage.png)

From here they can navigate to "/wifi" or "/status". Navigating to "/wifi" will show the following:

![Screenshot of WiFi selection page](photos/wifiSelect.png)

Here the user is shown a list of available access points and a text field to input a password (if necessary). Selecting a network will begin the connection attempt and activate **connWifiLed**. As per the autoconnect attempts on boot, the device will make 10 attempts before timing out. The user will be sent to "/wifichz", with the contents varying depending on the result of the connection attempts: If successful, the user will be invited to check "/status" and **wifiEnabledLed** will be lit. If unsuccessful, the user will be informed of the failure and be invited to return to "/wifi" and try again, with **wifiWaitLed** being lit.

![Screenshot of successful WiFi connection](photos/successConnection.png)

![Screenshot of unsuccessful WiFi connection](photos/failedConnection.png)

Visiting "/status" will show some useful information to the user.

![Screenshot of WiFi status page](photos/wifiStatus.png)

Once a successful connection has been established, and the green **wifiEnabledLed** is lit, the user can reboot the device in order to check for an OTA update.

**OTA Update:**
To get here, the device must have valid network credentials and autoconnected to it on boot. This can be verified by the user by observing the first 5 LEDs light in order (under these conditions, the device will 'rest' on the green **wifiEnabledLed**).

An OTA check will now be performed.

>NB I adopted the approach taken in Ex10, with some light adaptation in order to ensure the assignment rubric is met.

Firstly, **otaCheckLed** will be activated, and the device will grab the latest firmware version from a python server running on my desktop (the credentials of which are stored on lines 10-11 of [PrAndUpThing.ino](`PrAndUpThing/PrAndUpThing.ino`)). If the local and remote firmware versions match, the device will sit in the aforementioned 'rest' state. However, if the remote firmware version is greater than the local version, it will perform a GET request to obtain the latest firmware and begin an OTA update, activating the red **updatingLed** in the process.

If the update is successful, **updatedSuccLed** will be lit, and the device will wait for half a second before rebooting to launch the new firmware.

If at any point the update fails, the device will return to its rest state and perform an OTA check again on the next boot.

## Testing
I adopted a TDD approach to my development. When writing each function, I thought carefully about the various use cases it may have and how I could account for them. I would then run the device and trigger all the edge cases I could thing of, noting how the device responded, before going back to make my solution more robust. In particular, ensuring the LEDs lit up at the correct stages of provisioning and updating was the most difficult.

Take the WiFi LEDs, for instance. I previously used boolean flags like 'isConnecting' and 'wifiAutoconnected' in order to activate the WiFi LEDs in loop(). My reasoning for this was that I wanted to ensure that if the connection dropped, the LEDs would respond appropriately. I coded this incorrectly though, causing issues where the LEDs would constantly flip between **connWifiLed** and **wifiWaitLed** when connecting to a network, and would override other activateLED() function calls since they were in the loop.

I settled for moving the activateLED() calls into [WebServerPages.h](`PrAndUpThing/WebServerPages.h`) so I can call them at the correct points during connection within the web server page handlers and decided to revisit the issue later.

Coming back to the problem, I realised how I can implement a boolean 'isConnected' flag that gets set at the initial point of successful WiFi connection. This allows a check to be performed in the loop using isConnected (set true/false at the point of connection attempt) and WiFi.status() == WL_CONNECTED (is the WiFi currently connected?). If a mismatch occurs, then the device will attempt to reconnect.

I then tested this functionality by deleting the MAC address from the list of devices on my Ask4 account, however, I realised that the device was falsely believing it was connected to the internet, since my network directs users to a sign-in page. To get around this, I used a hotspot on another phone, and disabling the hotspot would trigger the reconnect attempt. I then tested that the behaviour was correct for when the reconnection is unsuccessful and also for if the access point is accessible again and reconnects successfully.

This is but one example of the sort of rigour I applied to testing my functions.